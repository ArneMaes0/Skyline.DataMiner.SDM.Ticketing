//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Skyline.DataMiner.SDM.CodeGenerator package.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Generated.SDM.Ticketing.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net;
    using Skyline.DataMiner.Net.Messages;
    using Skyline.DataMiner.Net.Messages.SLDataGateway;
    using Skyline.DataMiner.SDM;

    public class TicketDomStorageProvider : IStorageProvider<Ticket>
    {
        private readonly IConnection connection;
        private readonly DomHelper ticketHelper;
        public TicketDomStorageProvider(IConnection connection)
        {
            this.connection = connection;
            this.ticketHelper = new DomHelper(connection.HandleMessages, Generated.SDM.Ticketing.ModelsIds.ModuleId);
        }

        public Ticket Create(Ticket createObject)
        {
            var domTicket = ToInstance(createObject);
            domTicket.Save(ticketHelper);
            createObject = FromInstance(domTicket);
            return createObject;
        }

        public IEnumerable<Ticket> Read(FilterElement<Ticket> filter)
        {
            if (filter == null)
            {
                return ticketHelper.DomInstances.Read(DomInstanceExposers.DomDefinitionId.Equal(Generated.SDM.Ticketing.ModelsIds.Definitions.Ticket.Id)).Distinct().Select(x => FromInstance(new TicketInstance(x)));
            }

            var flatFilter = filter.flatten();
            var instances = new List<DomInstance>();
            foreach (var andFilter in flatFilter)
            {
                var domFilters = new List<FilterElement<DomInstance>> { DomInstanceExposers.DomDefinitionId.Equal(Generated.SDM.Ticketing.ModelsIds.Definitions.Ticket.Id) };
                foreach (var subFilter in andFilter.subFilters)
                {
                    domFilters.Add(TranslateExposer(subFilter));
                }

                if (domFilters.Count > 1)
                {
                    continue;
                }

                instances.AddRange(ticketHelper.DomInstances.Read(new ANDFilterElement<DomInstance>(domFilters.ToArray())));
            }

            return instances.Distinct().Select(x => FromInstance(new TicketInstance(x)));
        }

        public Ticket Update(Ticket updateObject)
        {
            var domTicket = ToInstance(updateObject);
            domTicket.Save(ticketHelper);
            updateObject = FromInstance(domTicket);
            return updateObject;
        }

        public Ticket Delete(Ticket deleteObject)
        {
            var domTicket = ToInstance(deleteObject);
            domTicket.Delete(ticketHelper);
            return deleteObject;
        }

        private static TicketInstance ToInstance(Ticket ticket)
        {
            var fields = new TicketInfoSection
            {
                TicketGuid = ticket.Guid,
                TicketID = ticket.ID,
                TicketDescription = ticket.Description,
                TicketType = ticket.Type,
                TicketPriority = ticket.Priority,
                TicketSeverity = ticket.Severity,
                TicketRequestedResolutionDate = ticket.RequestedResolutionDate,
                TicketExpectedResolutionDate = ticket.ExpectedResolutionDate,
            };

            TicketInstance instance;
            if (ticket.Guid == Guid.Empty)
            {
                instance = new TicketInstance { TicketInfo = fields };
            }
            else
            {
                instance = new TicketInstance(new DomInstance
                {
                    ID = new DomInstanceId(ticket.Guid)
                })
                {
                    TicketInfo = fields
                };
            }

            return instance;
        }

        private static Ticket FromInstance(TicketInstance ticket)
        {
            return new Ticket
            {
                Guid = ticket.TicketInfo.Guid.Value,
                ID = ticket.TicketInfo.ID,
                Description = ticket.TicketInfo.Description,
                Type = (Guid)ticket.TicketInfo.Type,
                Priority = (TicketPriority)(int)ticket.TicketInfo.Priority.Value,
                Severity = (TicketSeverity)(int)ticket.TicketInfo.Severity.Value,
                RequestedResolutionDate = ticket.TicketInfo.RequestedResolutionDate.Value,
                ExpectedResolutionDate = ticket.TicketInfo.ExpectedResolutionDate.Value,
            };
        }

        private static FilterElement<DomInstance> TranslateExposer(FilterElement<Ticket> filter)
        {
            var exposer = filter?.findManagedFilters(TicketExposers.FieldExposers.ToList())?.FirstOrDefault();
            if (exposer == null)
            {
                return new TRUEFilterElement<DomInstance>();
            }

            var fieldName = exposer.getFieldName().fieldName;
            var fieldValue = exposer.getValue();
            var comparer = exposer.getComparer();
            switch (fieldName)
            {
                case nameof(Ticket.Guid):
                    return TranslateFilter(DomInstanceExposers.FieldValues.DomInstanceField(Generated.SDM.Ticketing.ModelsIds.Sections.TicketFields.TicketGuid), comparer, (Guid)fieldValue);
                case nameof(Ticket.ID):
                    return TranslateFilter(DomInstanceExposers.FieldValues.DomInstanceField(Generated.SDM.Ticketing.ModelsIds.Sections.TicketFields.TicketID), comparer, (Guid)fieldValue);
                case nameof(Ticket.Description):
                    return TranslateFilter(DomInstanceExposers.FieldValues.DomInstanceField(Generated.SDM.Ticketing.ModelsIds.Sections.TicketFields.TicketDescription), comparer, (Guid)fieldValue);
                case nameof(Ticket.Type):
                    return TranslateFilter(DomInstanceExposers.FieldValues.DomInstanceField(Generated.SDM.Ticketing.ModelsIds.Sections.TicketFields.TicketType), comparer, (Guid)fieldValue);
                case nameof(Ticket.Priority):
                    return TranslateFilter(DomInstanceExposers.FieldValues.DomInstanceField(Generated.SDM.Ticketing.ModelsIds.Sections.TicketFields.TicketPriority), comparer, (int)fieldValue);
                case nameof(Ticket.Severity):
                    return TranslateFilter(DomInstanceExposers.FieldValues.DomInstanceField(Generated.SDM.Ticketing.ModelsIds.Sections.TicketFields.TicketSeverity), comparer, (int)fieldValue);
                case nameof(Ticket.RequestedResolutionDate):
                    return TranslateFilter(DomInstanceExposers.FieldValues.DomInstanceField(Generated.SDM.Ticketing.ModelsIds.Sections.TicketFields.TicketRequestedResolutionDate), comparer, (DateTime)fieldValue);
                case nameof(Ticket.ExpectedResolutionDate):
                    return TranslateFilter(DomInstanceExposers.FieldValues.DomInstanceField(Generated.SDM.Ticketing.ModelsIds.Sections.TicketFields.TicketExpectedResolutionDate), comparer, (DateTime)fieldValue);
                default:
                    throw new NotSupportedException("This comparer option is not supported yet.");
            }
        }

        private static ManagedFilter<DomInstance, IEnumerable> TranslateFilter(DynamicListExposer<DomInstance, object> exposer, Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer comparer, object value)
        {
            switch (comparer)
            {
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.Equals:
                    return exposer.Equal(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.NotEquals:
                    return exposer.NotEqual(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.GT:
                    return exposer.GreaterThan(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.GTE:
                    return exposer.GreaterThanOrEqual(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.LT:
                    return exposer.LessThan(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.LTE:
                    return exposer.LessThanOrEqual(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.Contains:
                    return exposer.Contains(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.NotContains:
                    return exposer.NotContains(value);
                default:
                    throw new NotSupportedException("This comparer option is not supported yet");
            }
        }
    }
}