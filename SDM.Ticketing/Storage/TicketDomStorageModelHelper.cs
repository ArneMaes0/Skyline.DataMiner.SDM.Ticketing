//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers
{
    using System;
    using System.Linq;

    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Messages;
    using Skyline.DataMiner.Net.Sections;

    /// <summary>
    /// Serves as the abstract base class for wrapper classes that provide access to DOM instances.
    /// The <see cref="DomInstanceBase"/> class defines the common functionality and structure for interacting with DOM objects stored in the database, serving as a foundation for derived classes that wrap specific DOM instances.
    /// </summary>
    public abstract class DomInstanceBase
    {
        protected DomInstanceBase(DomDefinitionId id)
        {
            if (id == null)
                throw new ArgumentNullException("id");
            domInstance = new DomInstance { DomDefinitionId = id };
        }

        protected DomInstanceBase(DomInstance domInstance)
        {
            if (domInstance == null)
                throw new ArgumentNullException("domInstance");
            this.domInstance = domInstance;
        }

        /// <summary>
        /// Gets the Module ID of the DOM Instance.
        /// </summary>
        public String ModuleId
        {
            get
            {
                return domInstance.DomDefinitionId.ModuleId;
            }
        }

        /// <summary>
        /// Gets the ID of the DOM Instance.
        /// </summary>
        public DomInstanceId ID
        {
            get
            {
                return domInstance.ID;
            }
        }

        /// <summary>
        /// Gets the name of the DOM Instance.
        /// </summary>
        public String Name
        {
            get
            {
                return domInstance.Name;
            }
        }

        /// <summary>
        /// Gets the Status ID of the DOM Instance.
        /// </summary>
        public String StatusId
        {
            get
            {
                return domInstance.StatusId;
            }
        }

        /// <summary>
        /// Gets the underlying DOM Instance.
        /// </summary>
        public DomDefinitionId DomDefinitionId
        {
            get
            {
                return domInstance.DomDefinitionId;
            }
        }

        protected DomInstance domInstance
        {
            get;
            set;
        }

        public static implicit operator DomInstance(DomInstanceBase instance)
        {
            return instance.ToInstance();
        }

        /// <summary>
        /// Deletes this DOM Instance from the database.
        /// </summary>
        /// <param name="messageHandler">The connection to the DataMiner system.</param>
        public void Delete(Func<DMSMessage[], DMSMessage[]> messageHandler)
        {
            Delete(new DomHelper(messageHandler, ModuleId));
        }

        /// <summary>
        /// Deletes this DOM Instance from the database.
        /// </summary>
        /// <param name="helper">The connection to the DataMiner system.</param>
        public void Delete(DomHelper helper)
        {
            helper.DomInstances.Delete(domInstance);
        }

        /// <summary>
        /// Saves this DOM Instance to the database.
        /// </summary>
        /// <param name="messageHandler">The connection to the DataMiner system.</param>
        public void Save(Func<DMSMessage[], DMSMessage[]> messageHandler)
        {
            Save(new DomHelper(messageHandler, ModuleId));
        }

        /// <summary>
        /// Saves this DOM Instance to the database.
        /// </summary>
        /// <param name="helper">The connection to the DataMiner system.</param>
        public abstract void Save(DomHelper helper);
        /// <summary>
        /// Return the DOM Instance object with all the fields filled in according to this object.
        /// </summary>
        public abstract DomInstance ToInstance();
        protected abstract void InitializeProperties();
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers
{
    using System;
    using System.Linq;

    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Sections;

    public abstract class DomSectionBase
    {
        protected Section section;
        protected DomSectionBase(SectionDefinitionID id)
        {
            if (id == null)
                throw new ArgumentNullException("id");
            this.section = new Section(id);
        }

        protected DomSectionBase(SectionDefinition definition)
        {
            if (definition == null)
                throw new ArgumentNullException("definition");
            this.section = new Section(definition);
        }

        protected DomSectionBase(Section section)
        {
            if (section == null)
                throw new ArgumentNullException("section");
            this.section = section;
        }

        /// <summary>
        /// Gets the section's ID.
        /// </summary>
        public SectionID ID
        {
            get
            {
                return section.ID;
            }
        }

        /// <summary>
        /// Gets the section's Section Definition ID.
        /// </summary>
        public SectionDefinitionID SectionDefinitionID
        {
            get
            {
                return section.SectionDefinitionID;
            }
        }

        public static implicit operator SectionDefinitionID(DomSectionBase sectionBase)
        {
            return sectionBase.section.SectionDefinitionID;
        }

        public static implicit operator SectionDefinition(DomSectionBase sectionBase)
        {
            return sectionBase.section.GetSectionDefinition();
        }

        public override string ToString()
        {
            return $"{this.section.SectionDefinitionID}";
        }

        public virtual Section ToSection()
        {
            return this.section;
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Editor automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcTicketing
{
    using System;

    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Sections;

    public static class SlcTicketingIds
    {
        public const string ModuleId = "(slc)ticketing";
        public static class Enums
        {
            public enum Ticket_Custom_Field_Type
            {
                String = 0,
                Double = 1,
                Long = 2,
                Datetime = 3,
                Timespan = 4,
                Boolean = 5
            }

            public enum Ticketpriorityenum
            {
                Low = 0,
                Medium = 1,
                High = 2,
                Critical = 3
            }

            public enum Ticketseverityenum
            {
                Minor = 0,
                Major = 1,
                Critical = 2
            }

            public enum Ticket_Type_Custom_Field
            {
                String = 0,
                Double = 1,
                Long = 2,
                Datetime = 3,
                Timespan = 4,
                Boolean = 5
            }

            public enum Affectedresourcetypes
            {
                Element = 0,
                Service = 1
            }
        }

        public static class Sections
        {
            public static class TicketAssigmentInfo
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("fe7b8c86-2740-4ad3-856d-25f77eb4e29d"))
                { ModuleId = "(slc)ticketing" };
                public static FieldDescriptorID TicketOrganization
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("1f542e08-7062-4642-a7f8-d9fe46a8e9f0"));
                public static FieldDescriptorID TicketTeam
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("8264ff8f-88e6-4ed4-a871-8556e35ebd04"));
                public static FieldDescriptorID TicketAssignee
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a941202f-186f-4526-a37b-b39bf8035ddb"));
            }

            public static class TicketCustomField
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("dbfcab97-e76e-417a-b77f-b43498e6c441"))
                { ModuleId = "(slc)ticketing" };
                public static FieldDescriptorID TicketCustomFieldKey
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("b32bc687-6014-4808-bf79-8c2ac7cf4cf9"));
                public static FieldDescriptorID TicketCustomFieldType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("4e36e2d5-587a-4f7e-a55e-ce0ee08b8510"));
                public static FieldDescriptorID TicketCustomFieldValue
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("c28caacf-f40b-4d13-95d3-3a64728b4eae"));
            }

            public static class TicketStatusInfo
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("3fbacb7e-f412-4cb9-a38d-0094af150404"))
                { ModuleId = "(slc)ticketing" };
                public static FieldDescriptorID TicketStatusChangeDate
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a183c5be-9973-4c16-930a-679bdc12511e"));
                public static FieldDescriptorID TicketStatusChangeReason
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("764ea644-effe-4d1a-82fe-d6c054b693e3"));
            }

            public static class TicketTypeInfo
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("a2321ad6-4377-4ec8-be75-c6a67eae4370"))
                { ModuleId = "(slc)ticketing" };
                public static FieldDescriptorID TicketTypeID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("4c44c1df-1dc3-4c65-b3cc-c3ffb003ca02"));
                public static FieldDescriptorID TicketTypeName
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("114048d2-c653-4239-a5b6-d76e44373f87"));
            }

            public static class TicketExternalIdentifiers
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("5a532296-37ec-45ce-a130-f6ef5c074da1"))
                { ModuleId = "(slc)ticketing" };
                public static FieldDescriptorID TicketExternalIdentifierID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("1a5cf744-778f-466c-ae4c-e6dde761b626"));
                public static FieldDescriptorID TicketExternalIdentifierType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("541684ea-1d3b-4c67-9de0-cb0bc9b245ee"));
                public static FieldDescriptorID TicketExternalIdentifierOwner
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("aa2ab7ee-04cf-4cf1-ad1d-260dc082cb70"));
            }

            public static class TicketGeneral
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("72725aad-8318-459c-a9c4-4ef811a7715f"))
                { ModuleId = "(slc)ticketing" };
                public static FieldDescriptorID TicketID
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("aaeb4358-bea1-45f9-b980-4e98e3751c67"));
                public static FieldDescriptorID TicketName
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("2f1497ad-339e-419e-951f-0104e3ed65b5"));
                public static FieldDescriptorID TicketDescription
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("52bf8306-3f4b-45de-bade-80bc71a866d2"));
                public static FieldDescriptorID TicketType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("48834300-3595-4b73-b329-58525525c434"));
                public static FieldDescriptorID TicketPriority
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("9f4cbaea-f8ef-47e0-8847-bd28fad57110"));
                public static FieldDescriptorID TicketSeverity
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("6e44c5e4-af62-4974-9e38-95860939b350"));
                public static FieldDescriptorID TicketRequestedResolutionDate
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a8678622-a5f2-44f8-9846-3971d475f813"));
                public static FieldDescriptorID TicketExpectedResolutionDate
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f905f642-01ef-4e0a-85e9-312dcb4d28de"));
            }

            public static class TicketTypeCustomField
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("bba99942-992c-4f90-afe0-a8c26b15b648"))
                { ModuleId = "(slc)ticketing" };
                public static FieldDescriptorID TicketTypeCustomFieldKey
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("6bdc041a-e765-48e0-ad34-15693375bf3f"));
                public static FieldDescriptorID TicketTypeCustomFieldType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("e2b1c188-2dcb-4c86-81c4-74af1ef66720"));
            }

            public static class TicketAffectedResources
            {
                public static SectionDefinitionID Id
                {
                    get;
                }

                = new SectionDefinitionID(new Guid("12f7997b-f386-4566-b3f9-4dce6f4e4bbc"))
                { ModuleId = "(slc)ticketing" };
                public static FieldDescriptorID Id_a41046b0
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("a41046b0-73e8-43b0-ae65-dd3c45be9693"));
                public static FieldDescriptorID Name
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("9a9da483-78b9-411a-b26b-536c654d6879"));
                public static FieldDescriptorID AffectedResourceType
                {
                    get;
                }

                = new FieldDescriptorID(new Guid("f9d43d38-7ed8-4fce-bd1f-f0a1141af7eb"));
            }
        }

        public static class Definitions
        {
            public static DomDefinitionId TicketType
            {
                get;
            }

            = new DomDefinitionId(new Guid("352cd984-1fe6-42a1-be96-3c4b267a04bb"))
            { ModuleId = "(slc)ticketing" };
            public static DomDefinitionId Ticket
            {
                get;
            }

            = new DomDefinitionId(new Guid("a44feefa-9b6e-46e7-bfea-ea2204751eb7"))
            { ModuleId = "(slc)ticketing" };
        }

        public static class Behaviors
        {
            public static class Tickets
            {
                public static DomBehaviorDefinitionId Id
                {
                    get;
                }

                = new DomBehaviorDefinitionId(new Guid("304e7274-1e81-4239-b9c0-38c8974d8837"))
                { ModuleId = "(slc)ticketing" };
                public static class Statuses
                {
                    public const string Acknowledged = "6717e9ed-b535-4abf-9c89-706b3a6e5dad";
                    public const string InProgress = "a6a70fcf-148c-43f9-9a9c-bd7102ffd5a6";
                    public const string Rejected = "99fb94d1-bf44-462f-bd45-b002a2c1b137";
                    public const string Resolved = "ba47b59d-f84a-4383-8cac-55bfa969912a";
                    public const string Cancelled = "0142519c-4c23-45c3-9d65-3a04b9d86a89";
                    public const string Closed = "b7e871b6-809f-4489-be16-f8df9dac31f5";
                    public const string Pending = "6702e253-eb58-426b-9e8e-59bcb6d484bf";
                    public const string Held = "8ddbd524-b836-4a2b-91b9-96b600ce2a5c";
                }

                public static class Transitions
                {
                    public const string Acknowledged_Inprogress = "acknowledged_inprogress";
                    public const string Acknowledged_Rejected = "acknowledged_rejected";
                    public const string Acknowledged_Cancelled = "acknowledged_cancelled";
                    public const string Inprogress_Resolved = "inprogress_resolved";
                    public const string Inprogress_Cancelled = "inprogress_cancelled";
                    public const string Inprogress_Pending = "inprogress_pending";
                    public const string Inprogress_Held = "inprogress_held";
                    public const string Resolved_Closed = "resolved_closed";
                    public const string Resolved_Inprogress = "resolved_inprogress";
                    public const string Pending_Cancelled = "pending_cancelled";
                    public const string Pending_Inprogress = "pending_inprogress";
                    public const string Held_Inprogress = "held_inprogress";
                }

                public static class Actions
                {
                    public const string SetToInProgress = "set to in progress";
                    public const string Resolve = "resolve";
                    public const string Close = "close";
                    public const string Cancel = "cancel";
                    public const string Reject = "reject";
                    public const string SetToPending = "set to pending";
                    public const string Hold = "hold";
                }
            }
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Dom Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcTicketing
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Messages;

    /// <summary>
    /// Represents a wrapper class for accessing a TicketTypeInstance DOM instance.
    /// The <see cref="TicketTypeInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketTypeInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketTypeInstance"/> class. Creates an empty <see cref="TicketTypeInstance"/> instance with default settings.
        /// </summary>
        public TicketTypeInstance() : base(SlcTicketingIds.Definitions.TicketType)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketTypeInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="TicketTypeInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketTypeInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcTicketingIds.Definitions.TicketType))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcTicketingIds.Definitions.TicketType)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the TicketTypeInfo section of the DOM Instance.
        /// </summary>
        public TicketTypeInfoSection TicketTypeInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the TicketTypeCustomField section of the DOM Instance.
        /// </summary>
        public IList<TicketTypeCustomFieldSection> TicketTypeCustomField
        {
            get;
            private set;
        }

        public static explicit operator TicketTypeInstance(DomInstance instance)
        {
            return new TicketTypeInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(TicketTypeInfo.ToSection());
            foreach (var item in TicketTypeCustomField)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            TicketTypeInfo = new TicketTypeInfoSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketTypeInfo.Id)));
            TicketTypeCustomField = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketTypeCustomField.Id)).Select(section => new TicketTypeCustomFieldSection(section)).ToList();
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TicketInstance DOM instance.
    /// The <see cref="TicketInstance"/> class provides simplified access to the data and functionality of the underlying DOM instance, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketInstance : DomInstanceBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketInstance"/> class. Creates an empty <see cref="TicketInstance"/> instance with default settings.
        /// </summary>
        public TicketInstance() : base(SlcTicketingIds.Definitions.Ticket)
        {
            InitializeProperties();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketInstance"/> class using the specified <paramref name="domInstance"/> for initializing the object.
        /// </summary>
        /// <param name="domInstance">The <see cref="DomInstance"/> object that provides data for initializing the <see cref="TicketInstance"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketInstance(DomInstance domInstance) : base(domInstance)
        {
            if (!domInstance.DomDefinitionId.Equals(SlcTicketingIds.Definitions.Ticket))
                throw new ArgumentException($"The given domInstance, is not of type '{nameof(SlcTicketingIds.Definitions.Ticket)}'", nameof(domInstance));
            InitializeProperties();
        }

        /// <summary>
        /// Gets or sets the TicketAssigmentInfo section of the DOM Instance.
        /// </summary>
        public TicketAssigmentInfoSection TicketAssigmentInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the TicketCustomField section of the DOM Instance.
        /// </summary>
        public IList<TicketCustomFieldSection> TicketCustomField
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the TicketStatusInfo section of the DOM Instance.
        /// </summary>
        public TicketStatusInfoSection TicketStatusInfo
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the TicketExternalIdentifiers section of the DOM Instance.
        /// </summary>
        public IList<TicketExternalIdentifiersSection> TicketExternalIdentifiers
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the TicketGeneral section of the DOM Instance.
        /// </summary>
        public TicketGeneralSection TicketGeneral
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the TicketAffectedResources section of the DOM Instance.
        /// </summary>
        public IList<TicketAffectedResourcesSection> TicketAffectedResources
        {
            get;
            private set;
        }

        public static explicit operator TicketInstance(DomInstance instance)
        {
            return new TicketInstance(instance);
        }

        /// <inheritdoc />
        public override DomInstance ToInstance()
        {
            domInstance.Sections.Clear();
            domInstance.Sections.Add(TicketAssigmentInfo.ToSection());
            foreach (var item in TicketCustomField)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            domInstance.Sections.Add(TicketStatusInfo.ToSection());
            foreach (var item in TicketExternalIdentifiers)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            domInstance.Sections.Add(TicketGeneral.ToSection());
            foreach (var item in TicketAffectedResources)
            {
                domInstance.Sections.Add(item.ToSection());
            }

            return domInstance;
        }

        /// <inheritdoc />
        public override void Save(DomHelper helper)
        {
            var exist = helper.DomInstances.Read(DomInstanceExposers.Id.Equal(domInstance.ID)).FirstOrDefault();
            var instance = ToInstance();
            if (exist == null)
            {
                domInstance = helper.DomInstances.Create(instance);
            }
            else
            {
                domInstance = helper.DomInstances.Update(instance);
            }
        }

        protected override void InitializeProperties()
        {
            TicketAssigmentInfo = new TicketAssigmentInfoSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketAssigmentInfo.Id)));
            TicketCustomField = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketCustomField.Id)).Select(section => new TicketCustomFieldSection(section)).ToList();
            TicketStatusInfo = new TicketStatusInfoSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketStatusInfo.Id)));
            TicketExternalIdentifiers = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketExternalIdentifiers.Id)).Select(section => new TicketExternalIdentifiersSection(section)).ToList();
            TicketGeneral = new TicketGeneralSection(domInstance.Sections.FirstOrDefault(section => section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketGeneral.Id)));
            TicketAffectedResources = domInstance.Sections.Where(section => section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketAffectedResources.Id)).Select(section => new TicketAffectedResourcesSection(section)).ToList();
        }
    }
}
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the DOM Code Generator automation script.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DomHelpers.SlcTicketing
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Linq;

    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net.Apps.Sections.Sections;
    using Skyline.DataMiner.Net.Messages;
    using Skyline.DataMiner.Net.Sections;

    /// <summary>
    /// Represents a wrapper class for accessing a TicketAssigmentInfoSection section.
    /// The <see cref="TicketAssigmentInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketAssigmentInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketAssigmentInfoSection"/> class. Creates an empty <see cref="TicketAssigmentInfoSection"/> object with default settings.
        /// </summary>
        public TicketAssigmentInfoSection() : base(SlcTicketingIds.Sections.TicketAssigmentInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketAssigmentInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TicketAssigmentInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketAssigmentInfoSection(Section section) : base(SlcTicketingIds.Sections.TicketAssigmentInfo.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketAssigmentInfo.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcTicketingIds.Sections.TicketAssigmentInfo.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the TicketOrganization field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? TicketOrganization
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcTicketingIds.Sections.TicketAssigmentInfo.TicketOrganization);
                if (wrapper != null)
                {
                    return (Guid?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketAssigmentInfo.TicketOrganization);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketAssigmentInfo.TicketOrganization, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketTeam field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? TicketTeam
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcTicketingIds.Sections.TicketAssigmentInfo.TicketTeam);
                if (wrapper != null)
                {
                    return (Guid?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketAssigmentInfo.TicketTeam);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketAssigmentInfo.TicketTeam, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketAssignee field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? TicketAssignee
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcTicketingIds.Sections.TicketAssigmentInfo.TicketAssignee);
                if (wrapper != null)
                {
                    return (Guid?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketAssigmentInfo.TicketAssignee);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketAssigmentInfo.TicketAssignee, (Guid)value);
                }
            }
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TicketCustomFieldSection section.
    /// The <see cref="TicketCustomFieldSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketCustomFieldSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketCustomFieldSection"/> class. Creates an empty <see cref="TicketCustomFieldSection"/> object with default settings.
        /// </summary>
        public TicketCustomFieldSection() : base(SlcTicketingIds.Sections.TicketCustomField.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketCustomFieldSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TicketCustomFieldSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketCustomFieldSection(Section section) : base(SlcTicketingIds.Sections.TicketCustomField.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketCustomField.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcTicketingIds.Sections.TicketCustomField.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the TicketCustomFieldKey field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketCustomFieldKey
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldKey);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldKey);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldKey, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketCustomFieldType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcTicketingIds.Enums.Ticket_Custom_Field_Type? TicketCustomFieldType
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldType);
                if (wrapper != null)
                {
                    return (SlcTicketingIds.Enums.Ticket_Custom_Field_Type?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldType, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketCustomFieldValue field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketCustomFieldValue
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldValue);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldValue);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldValue, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldKey) == null)
                throw new InvalidOperationException("'TicketCustomFieldKey' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Int32>(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldType) == null)
                throw new InvalidOperationException("'TicketCustomFieldType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketCustomField.TicketCustomFieldValue) == null)
                throw new InvalidOperationException("'TicketCustomFieldValue' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TicketStatusInfoSection section.
    /// The <see cref="TicketStatusInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketStatusInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketStatusInfoSection"/> class. Creates an empty <see cref="TicketStatusInfoSection"/> object with default settings.
        /// </summary>
        public TicketStatusInfoSection() : base(SlcTicketingIds.Sections.TicketStatusInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketStatusInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TicketStatusInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketStatusInfoSection(Section section) : base(SlcTicketingIds.Sections.TicketStatusInfo.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketStatusInfo.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcTicketingIds.Sections.TicketStatusInfo.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the TicketStatusChangeDate field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? TicketStatusChangeDate
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcTicketingIds.Sections.TicketStatusInfo.TicketStatusChangeDate);
                if (wrapper != null)
                {
                    return (DateTime?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketStatusInfo.TicketStatusChangeDate);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketStatusInfo.TicketStatusChangeDate, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketStatusChangeReason field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketStatusChangeReason
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketStatusInfo.TicketStatusChangeReason);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketStatusInfo.TicketStatusChangeReason);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketStatusInfo.TicketStatusChangeReason, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<DateTime>(SlcTicketingIds.Sections.TicketStatusInfo.TicketStatusChangeDate) == null)
                throw new InvalidOperationException("'TicketStatusChangeDate' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketStatusInfo.TicketStatusChangeReason) == null)
                throw new InvalidOperationException("'TicketStatusChangeReason' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TicketTypeInfoSection section.
    /// The <see cref="TicketTypeInfoSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketTypeInfoSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketTypeInfoSection"/> class. Creates an empty <see cref="TicketTypeInfoSection"/> object with default settings.
        /// </summary>
        public TicketTypeInfoSection() : base(SlcTicketingIds.Sections.TicketTypeInfo.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketTypeInfoSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TicketTypeInfoSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketTypeInfoSection(Section section) : base(SlcTicketingIds.Sections.TicketTypeInfo.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketTypeInfo.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcTicketingIds.Sections.TicketTypeInfo.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the TicketTypeID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketTypeID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketTypeName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketTypeName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeName, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeID) == null)
                throw new InvalidOperationException("'TicketTypeID' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeName) == null)
                throw new InvalidOperationException("'TicketTypeName' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TicketExternalIdentifiersSection section.
    /// The <see cref="TicketExternalIdentifiersSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketExternalIdentifiersSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketExternalIdentifiersSection"/> class. Creates an empty <see cref="TicketExternalIdentifiersSection"/> object with default settings.
        /// </summary>
        public TicketExternalIdentifiersSection() : base(SlcTicketingIds.Sections.TicketExternalIdentifiers.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketExternalIdentifiersSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TicketExternalIdentifiersSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketExternalIdentifiersSection(Section section) : base(SlcTicketingIds.Sections.TicketExternalIdentifiers.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketExternalIdentifiers.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcTicketingIds.Sections.TicketExternalIdentifiers.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the TicketExternalIdentifierID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketExternalIdentifierID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketExternalIdentifierType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketExternalIdentifierType
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierType);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierType, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketExternalIdentifierOwner field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketExternalIdentifierOwner
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierOwner);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierOwner);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierOwner, (String)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierID) == null)
                throw new InvalidOperationException("'TicketExternalIdentifierID' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketExternalIdentifiers.TicketExternalIdentifierOwner) == null)
                throw new InvalidOperationException("'TicketExternalIdentifierOwner' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TicketGeneralSection section.
    /// The <see cref="TicketGeneralSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketGeneralSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketGeneralSection"/> class. Creates an empty <see cref="TicketGeneralSection"/> object with default settings.
        /// </summary>
        public TicketGeneralSection() : base(SlcTicketingIds.Sections.TicketGeneral.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketGeneralSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TicketGeneralSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketGeneralSection(Section section) : base(SlcTicketingIds.Sections.TicketGeneral.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketGeneral.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcTicketingIds.Sections.TicketGeneral.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the TicketID field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketID
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketGeneral.TicketID);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketGeneral.TicketID);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketGeneral.TicketID, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketName field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketName
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketGeneral.TicketName);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketGeneral.TicketName);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketGeneral.TicketName, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketDescription field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketDescription
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketGeneral.TicketDescription);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketGeneral.TicketDescription);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketGeneral.TicketDescription, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public Guid? TicketType
        {
            get
            {
                var wrapper = section.GetValue<Guid>(SlcTicketingIds.Sections.TicketGeneral.TicketType);
                if (wrapper != null)
                {
                    return (Guid?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketGeneral.TicketType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketGeneral.TicketType, (Guid)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketPriority field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcTicketingIds.Enums.Ticketpriorityenum? TicketPriority
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcTicketingIds.Sections.TicketGeneral.TicketPriority);
                if (wrapper != null)
                {
                    return (SlcTicketingIds.Enums.Ticketpriorityenum?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketGeneral.TicketPriority);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketGeneral.TicketPriority, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketSeverity field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcTicketingIds.Enums.Ticketseverityenum? TicketSeverity
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcTicketingIds.Sections.TicketGeneral.TicketSeverity);
                if (wrapper != null)
                {
                    return (SlcTicketingIds.Enums.Ticketseverityenum?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketGeneral.TicketSeverity);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketGeneral.TicketSeverity, (Int32)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketRequestedResolutionDate field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? TicketRequestedResolutionDate
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcTicketingIds.Sections.TicketGeneral.TicketRequestedResolutionDate);
                if (wrapper != null)
                {
                    return (DateTime?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketGeneral.TicketRequestedResolutionDate);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketGeneral.TicketRequestedResolutionDate, (DateTime)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketExpectedResolutionDate field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public DateTime? TicketExpectedResolutionDate
        {
            get
            {
                var wrapper = section.GetValue<DateTime>(SlcTicketingIds.Sections.TicketGeneral.TicketExpectedResolutionDate);
                if (wrapper != null)
                {
                    return (DateTime?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketGeneral.TicketExpectedResolutionDate);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketGeneral.TicketExpectedResolutionDate, (DateTime)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketGeneral.TicketID) == null)
                throw new InvalidOperationException("'TicketID' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketGeneral.TicketDescription) == null)
                throw new InvalidOperationException("'TicketDescription' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TicketTypeCustomFieldSection section.
    /// The <see cref="TicketTypeCustomFieldSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketTypeCustomFieldSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketTypeCustomFieldSection"/> class. Creates an empty <see cref="TicketTypeCustomFieldSection"/> object with default settings.
        /// </summary>
        public TicketTypeCustomFieldSection() : base(SlcTicketingIds.Sections.TicketTypeCustomField.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketTypeCustomFieldSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TicketTypeCustomFieldSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketTypeCustomFieldSection(Section section) : base(SlcTicketingIds.Sections.TicketTypeCustomField.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketTypeCustomField.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcTicketingIds.Sections.TicketTypeCustomField.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the TicketTypeCustomFieldKey field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String TicketTypeCustomFieldKey
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketTypeCustomField.TicketTypeCustomFieldKey);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketTypeCustomField.TicketTypeCustomFieldKey);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketTypeCustomField.TicketTypeCustomFieldKey, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the TicketTypeCustomFieldType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcTicketingIds.Enums.Ticket_Type_Custom_Field? TicketTypeCustomFieldType
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcTicketingIds.Sections.TicketTypeCustomField.TicketTypeCustomFieldType);
                if (wrapper != null)
                {
                    return (SlcTicketingIds.Enums.Ticket_Type_Custom_Field?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketTypeCustomField.TicketTypeCustomFieldType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketTypeCustomField.TicketTypeCustomFieldType, (Int32)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketTypeCustomField.TicketTypeCustomFieldKey) == null)
                throw new InvalidOperationException("'TicketTypeCustomFieldKey' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Int32>(SlcTicketingIds.Sections.TicketTypeCustomField.TicketTypeCustomFieldType) == null)
                throw new InvalidOperationException("'TicketTypeCustomFieldType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }

    /// <summary>
    /// Represents a wrapper class for accessing a TicketAffectedResourcesSection section.
    /// The <see cref="TicketAffectedResourcesSection"/> class provides simplified access to the data and functionality of the underlying DOM section, allowing for easier manipulation and retrieval of data from DOM.
    /// </summary>
    public partial class TicketAffectedResourcesSection : DomSectionBase
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TicketAffectedResourcesSection"/> class. Creates an empty <see cref="TicketAffectedResourcesSection"/> object with default settings.
        /// </summary>
        public TicketAffectedResourcesSection() : base(SlcTicketingIds.Sections.TicketAffectedResources.Id)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TicketAffectedResourcesSection"/> class using the specified <paramref name="section"/> for initializing the object.
        /// </summary>
        /// <param name="section">The <see cref="Section"/> object that provides data for initializing the <see cref="TicketAffectedResourcesSection"/>. If the section is <c>null</c>, the constructor will not perform any initialization.</param>
        public TicketAffectedResourcesSection(Section section) : base(SlcTicketingIds.Sections.TicketAffectedResources.Id)
        {
            if (section == null)
            {
                return;
            }

            if (!section.SectionDefinitionID.Equals(SlcTicketingIds.Sections.TicketAffectedResources.Id))
            {
                throw new ArgumentException($"The given section, is not of type '{nameof(SlcTicketingIds.Sections.TicketAffectedResources.Id)}'", nameof(section));
            }

            this.section = section;
        }

        /// <summary>
        /// Gets or sets the Id_a41046b0 field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Id_a41046b0
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketAffectedResources.Id_a41046b0);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketAffectedResources.Id_a41046b0);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketAffectedResources.Id_a41046b0, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the Name field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>- If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>- If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public String Name
        {
            get
            {
                var wrapper = section.GetValue<String>(SlcTicketingIds.Sections.TicketAffectedResources.Name);
                if (wrapper != null)
                {
                    return (String)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketAffectedResources.Name);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketAffectedResources.Name, (String)value);
                }
            }
        }

        /// <summary>
        /// Gets or sets the AffectedResourceType field of the DOM Instance.
        /// </summary>
        /// <remarks>
        /// When retrieving the value:
        /// <list type="bullet">
        /// <item>If the field has been set, it will return the value.</item>
        /// <item>If the field is not set it will return <see langword="null"/>.</item>
        /// </list>
        /// When setting the value:
        /// <list type="bullet">
        /// <item>If <see langword="null"/> is assigned, the field will be removed from the section.</item>
        /// <item>If a valid value is assigned, the field value will be added or updated in the section.</item>
        /// </list>
        /// </remarks>
        public SlcTicketingIds.Enums.Affectedresourcetypes? AffectedResourceType
        {
            get
            {
                var wrapper = section.GetValue<Int32>(SlcTicketingIds.Sections.TicketAffectedResources.AffectedResourceType);
                if (wrapper != null)
                {
                    return (SlcTicketingIds.Enums.Affectedresourcetypes?)wrapper.Value;
                }
                else
                {
                    return null;
                }
            }

            set
            {
                if (value == null)
                {
                    section.RemoveFieldValueById(SlcTicketingIds.Sections.TicketAffectedResources.AffectedResourceType);
                }
                else
                {
                    section.AddOrUpdateValue(SlcTicketingIds.Sections.TicketAffectedResources.AffectedResourceType, (Int32)value);
                }
            }
        }

        /// <inheritdoc />
        public override Section ToSection()
        {
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketAffectedResources.Id_a41046b0) == null)
                throw new InvalidOperationException("'Id_a41046b0' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<String>(SlcTicketingIds.Sections.TicketAffectedResources.Name) == null)
                throw new InvalidOperationException("'Name' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            if (section.GetValue<Int32>(SlcTicketingIds.Sections.TicketAffectedResources.AffectedResourceType) == null)
                throw new InvalidOperationException("'AffectedResourceType' is required. Please fill it in before saving, or mark it as optional with the DOM Editor.");
            return section;
        }
    }
}

