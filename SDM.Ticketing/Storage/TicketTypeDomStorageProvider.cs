//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Skyline.DataMiner.SDM.CodeGenerator package.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Skyline.DataMiner.SDM.Ticketing.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    using DomHelpers.SlcTicketing;

    using Skyline.DataMiner.Net.Apps.DataMinerObjectModel;
    using Skyline.DataMiner.Net;
    using Skyline.DataMiner.Net.Messages.SLDataGateway;
    using Skyline.DataMiner.SDM.Ticketing.Exposers;
    using Skyline.DataMiner.SDM.Ticketing.Storage;
    using SLDataGateway.API.Types.Querying;

    public class TicketTypeDomStorageProvider : IStorageProvider<TicketType>
    {
        private readonly IConnection connection;
        private readonly DomHelper ticketTypeHelper;
        public TicketTypeDomStorageProvider(IConnection connection)
        {
            this.connection = connection;
            this.ticketTypeHelper = new DomHelper(connection.HandleMessages, SlcTicketingIds.ModuleId);
        }

        public TicketType Create(TicketType createObject)
        {
            var domTicketType = ToInstance(createObject);
            domTicketType.Save(ticketTypeHelper);
            createObject = FromInstance(domTicketType);
            return createObject;
        }

        public IEnumerable<TicketType> Read(FilterElement<TicketType> filter)
        {
            if (filter == null)
            {
                return ticketTypeHelper.DomInstances.Read(DomInstanceExposers.DomDefinitionId.Equal(SlcTicketingIds.Definitions.TicketType.Id)).Distinct().Select(x => FromInstance(new TicketTypeInstance(x)));
            }

            var flatFilter = filter.flatten();
            var instances = new List<DomInstance>();
            foreach (var andFilter in flatFilter)
            {
                var domFilters = new List<FilterElement<DomInstance>> { DomInstanceExposers.DomDefinitionId.Equal(SlcTicketingIds.Definitions.TicketType.Id) };
                foreach (var subFilter in andFilter.subFilters)
                {
                    domFilters.Add(TranslateExposer(subFilter));
                }

                if (domFilters.Count < 1)
                {
                    continue;
                }

                instances.AddRange(ticketTypeHelper.DomInstances.Read(new ANDFilterElement<DomInstance>(domFilters.ToArray())));
            }

            return instances.Distinct().Select(x => FromInstance(new TicketTypeInstance(x)));
        }

        public IEnumerable<TicketType> Read(IQuery<TicketType> filter)
        {
            return Enumerable.Empty<TicketType>();
        }

        public TicketType Update(TicketType updateObject)
        {
            var domTicketType = ToInstance(updateObject);
            domTicketType.Save(ticketTypeHelper);
            updateObject = FromInstance(domTicketType);
            return updateObject;
        }

        public TicketType Delete(TicketType deleteObject)
        {
            var domTicketType = ToInstance(deleteObject);
            domTicketType.Delete(ticketTypeHelper);
            return deleteObject;
        }

        private static TicketTypeInstance ToInstance(TicketType ticketType)
        {
            var fields = new TicketTypeInfoSection
            {
                TicketTypeID = ticketType.ID,
                TicketTypeName = ticketType.Name,
            };

            TicketTypeInstance instance;
            if (ticketType.Guid == Guid.Empty)
            {
                instance = new TicketTypeInstance(new DomInstance
                {
                    DomDefinitionId = SlcTicketingIds.Definitions.TicketType,
                })
                {
                    TicketTypeInfo = fields
                };
            }
            else
            {
                instance = new TicketTypeInstance(new DomInstance
                {
                    ID = new DomInstanceId(ticketType.Guid),
                    DomDefinitionId = SlcTicketingIds.Definitions.TicketType,
                })
                {
                    TicketTypeInfo = fields
                };
            }

            return instance;
        }

        private static TicketType FromInstance(TicketTypeInstance ticketType)
        {
            return new TicketType
            {
                Guid = ticketType.ID.Id,
                ID = ticketType.TicketTypeInfo.TicketTypeID,
                Name = ticketType.TicketTypeInfo.TicketTypeName,
            };
        }

        private static FilterElement<DomInstance> TranslateExposer(FilterElement<TicketType> filter)
        {
            var exposer = filter?.findManagedFilters(TicketTypeExposers.FieldExposers.ToList())?.FirstOrDefault();
            if (exposer == null)
            {
                return new TRUEFilterElement<DomInstance>();
            }

            var fieldName = exposer.getFieldName().fieldName;
            var fieldValue = exposer.getValue();
            var comparer = exposer.getComparer();
            switch (fieldName)
            {
                case nameof(TicketType.Guid):
                    return new ManagedFilter<DomInstance, Guid>(
                        DomInstanceExposers.Id,
                        comparer,
                        (Guid)fieldValue,
                        (value) => value.ID.Id.Equals((Guid)fieldValue));

                case nameof(TicketType.ID):
                    return TranslateFilter(
                        DomInstanceExposers.FieldValues.DomInstanceField(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeID),
                        comparer,
                        (String)fieldValue);

                case nameof(TicketType.Name):
                    return TranslateFilter(
                        DomInstanceExposers.FieldValues.DomInstanceField(SlcTicketingIds.Sections.TicketTypeInfo.TicketTypeName),
                        comparer,
                        (String)fieldValue);

                default:
                    throw new NotSupportedException("This comparer option is not supported yet.");
            }
        }

        private static ManagedFilter<DomInstance, IEnumerable> TranslateFilter(DynamicListExposer<DomInstance, object> exposer, Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer comparer, object value)
        {
            switch (comparer)
            {
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.Equals:
                    return exposer.Equal(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.NotEquals:
                    return exposer.NotEqual(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.GT:
                    return exposer.GreaterThan(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.GTE:
                    return exposer.GreaterThanOrEqual(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.LT:
                    return exposer.LessThan(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.LTE:
                    return exposer.LessThanOrEqual(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.Contains:
                    return exposer.Contains(value);
                case Skyline.DataMiner.Net.Messages.SLDataGateway.Comparer.NotContains:
                    return exposer.NotContains(value);
                default:
                    throw new NotSupportedException("This comparer option is not supported yet");
            }
        }
    }
}